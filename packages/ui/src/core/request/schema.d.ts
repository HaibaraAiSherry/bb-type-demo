/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/typing-service/account/checkToken': {
    post: operations['checkTokenUsingPOST'];
  };
  '/typing-service/account/login': {
    post: operations['loginUsingPOST'];
  };
  '/typing-service/account/refreshToken': {
    post: operations['refreshTokenUsingPOST'];
  };
  '/typing-service/account/register': {
    post: operations['registerUsingPOST'];
  };
  '/typing-service/account/setting/{type}': {
    get: operations['getSettingUsingGET'];
    post: operations['updateSettingUsingPOST'];
  };
  '/typing-service/account/article/getHistoryArticle': {
    get: operations['getArticleByIdUsingGET'];
  };
  '/typing-service/account/history/uploadHistoryAndArticle': {
    post: operations['uploadHistoryAndArticleUsingPOST'];
  };
  '/typing-service/account/history/uploadTypingDetail': {
    post: operations['uploadTypingDetailUsingPOST'];
  };
  '/typing-service/version/test/codeLength': {
    post: operations['codeLengthUsingPOST'];
  };
  '/typing-service/version/test/compare': {
    post: operations['compareUsingPOST'];
  };
  '/typing-service/version/test/redis': {
    post: operations['uploadWordLibUsingPOST'];
  };
  '/typing-service/version/test/synData': {
    post: operations['synDataUsingPOST'];
  };
  '/typing-service/version/test/typingTips': {
    post: operations['typingTipsUsingPOST'];
  };
  '/typing-service/account/match/getPCTljMatchAchByDate': {
    get: operations['getPCTljMatchAchByDateUsingGET'];
  };
  '/typing-service/account/match/today': {
    get: operations['getTodayMatchUsingGET'];
  };
  '/typing-service/account/match/uploadTljMatchAch': {
    post: operations['uploadTljMatchAchUsingPOST'];
  };
  '/typing-service/version/newVersion': {
    get: operations['getNewVersionUsingGET'];
  };
  '/typing-service/account/type/changeNum': {
    post: operations['changeNumUsingPOST'];
  };
  '/typing-service/account/type/history': {
    get: operations['getMyTypeHistoryUsingGET'];
  };
  '/typing-service/account/type/info': {
    get: operations['getMyInfoUsingGET'];
  };
  '/typing-service/wordLib/community/list': {
    get: operations['uploadWordLibUsingGET'];
  };
  '/typing-service/wordLib/community/share': {
    post: operations['shareUsingPOST'];
  };
  '/typing-service/wordLib': {
    get: operations['wordLibPageUsingGET'];
    put: operations['uploadWordLibUsingPUT'];
    delete: operations['deleteWordLibUsingDELETE'];
  };
  '/typing-service/wordLib/load': {
    post: operations['loadWordLibUsingPOST'];
  };
  '/typing-service/wordLib/setting': {
    get: operations['getSettingUsingGET_1'];
    put: operations['settingUsingPUT'];
    delete: operations['deleteSettingUsingDELETE'];
  };
  '/typing-service/wordLib/typingTips': {
    post: operations['typingTipsUsingPOST_1'];
  };
}

export interface components {
  schemas: {
    /** AccountDto */
    AccountDto: {
      /** Format: int64 */
      id?: number;
      ip?: string;
      password?: string;
      username?: string;
    };
    /** Article */
    Article: {
      /** @description 内容 */
      content?: string;
      /** Format: int64 */
      id?: number;
      /** @description 标题 */
      title?: string;
    };
    /** ArticleDto */
    ArticleDto: {
      content?: string;
      /** Format: int32 */
      id?: number;
      title?: string;
    };
    /** CodeParam */
    CodeParam: {
      code?: string;
      ignoreSymbols?: boolean;
      origin?: string;
      typed?: string;
    };
    /** ComparisonItem */
    ComparisonItem: {
      /** Format: int32 */
      type?: number;
      word?: string;
    };
    /** Header */
    Header: {
      component?: string;
      key?: string;
      label?: string;
      merge?: boolean;
      /** Format: int32 */
      width?: number;
    };
    /** HistoryArticleDto */
    HistoryArticleDto: {
      articleDto?: components['schemas']['ArticleDto'];
      typeHistoryDto?: components['schemas']['TypeHistoryDto'];
    };
    /** NumDto */
    NumDto: {
      /** Format: int32 */
      dateNum?: number;
      /** Format: int32 */
      misNum?: number;
      /** Format: int32 */
      num?: number;
      numKey?: string;
      /** Format: int32 */
      rightNum?: number;
    };
    /** PageTable«TypeHistoryDto» */
    'PageTable«TypeHistoryDto»': {
      /** Format: int64 */
      current?: number;
      hasNextPage?: boolean;
      hasPreviousPage?: boolean;
      /** Format: int64 */
      pages?: number;
      /** Format: int64 */
      size?: number;
      table?: components['schemas']['Table«TypeHistoryDto»'];
      /** Format: int64 */
      total?: number;
    };
    /** PageTable«TypingHistoryVO» */
    'PageTable«TypingHistoryVO»': {
      /** Format: int64 */
      current?: number;
      hasNextPage?: boolean;
      hasPreviousPage?: boolean;
      /** Format: int64 */
      pages?: number;
      /** Format: int64 */
      size?: number;
      table?: components['schemas']['Table«TypingHistoryVO»'];
      /** Format: int64 */
      total?: number;
    };
    /** PageTable«UserWordSettingListPageVO» */
    'PageTable«UserWordSettingListPageVO»': {
      /** Format: int64 */
      current?: number;
      hasNextPage?: boolean;
      hasPreviousPage?: boolean;
      /** Format: int64 */
      pages?: number;
      /** Format: int64 */
      size?: number;
      table?: components['schemas']['Table«UserWordSettingListPageVO»'];
      /** Format: int64 */
      total?: number;
    };
    /** PageTable«WordLibListPageVO» */
    'PageTable«WordLibListPageVO»': {
      /** Format: int64 */
      current?: number;
      hasNextPage?: boolean;
      hasPreviousPage?: boolean;
      /** Format: int64 */
      pages?: number;
      /** Format: int64 */
      size?: number;
      table?: components['schemas']['Table«WordLibListPageVO»'];
      /** Format: int64 */
      total?: number;
    };
    /** Result«Array«SubscriptInstance»» */
    'Result«Array«SubscriptInstance»»': {
      /** Format: int64 */
      code?: number;
      message?: string;
      result?: components['schemas']['SubscriptInstance'][];
    };
    /** Result«Article» */
    'Result«Article»': {
      /** Format: int64 */
      code?: number;
      message?: string;
      result?: components['schemas']['Article'];
    };
    /** Result«JSONObject» */
    'Result«JSONObject»': {
      /** Format: int64 */
      code?: number;
      message?: string;
      result?: { [key: string]: { [key: string]: unknown } };
    };
    /** Result«List«ComparisonItem»» */
    'Result«List«ComparisonItem»»': {
      /** Format: int64 */
      code?: number;
      message?: string;
      result?: components['schemas']['ComparisonItem'][];
    };
    /** Result«NumDto» */
    'Result«NumDto»': {
      /** Format: int64 */
      code?: number;
      message?: string;
      result?: components['schemas']['NumDto'];
    };
    /** Result«PageTable«TypeHistoryDto»» */
    'Result«PageTable«TypeHistoryDto»»': {
      /** Format: int64 */
      code?: number;
      message?: string;
      result?: components['schemas']['PageTable«TypeHistoryDto»'];
    };
    /** Result«PageTable«TypingHistoryVO»» */
    'Result«PageTable«TypingHistoryVO»»': {
      /** Format: int64 */
      code?: number;
      message?: string;
      result?: components['schemas']['PageTable«TypingHistoryVO»'];
    };
    /** Result«PageTable«UserWordSettingListPageVO»» */
    'Result«PageTable«UserWordSettingListPageVO»»': {
      /** Format: int64 */
      code?: number;
      message?: string;
      result?: components['schemas']['PageTable«UserWordSettingListPageVO»'];
    };
    /** Result«PageTable«WordLibListPageVO»» */
    'Result«PageTable«WordLibListPageVO»»': {
      /** Format: int64 */
      code?: number;
      message?: string;
      result?: components['schemas']['PageTable«WordLibListPageVO»'];
    };
    /** Result«TypingMatchVO» */
    'Result«TypingMatchVO»': {
      /** Format: int64 */
      code?: number;
      message?: string;
      result?: components['schemas']['TypingMatchVO'];
    };
    /** Result«TypingTips» */
    'Result«TypingTips»': {
      /** Format: int64 */
      code?: number;
      message?: string;
      result?: components['schemas']['TypingTips'];
    };
    /** Result«TypingUser» */
    'Result«TypingUser»': {
      /** Format: int64 */
      code?: number;
      message?: string;
      result?: components['schemas']['TypingUser'];
    };
    /** Result«TypingVersion» */
    'Result«TypingVersion»': {
      /** Format: int64 */
      code?: number;
      message?: string;
      result?: components['schemas']['TypingVersion'];
    };
    /** Result«string» */
    'Result«string»': {
      /** Format: int64 */
      code?: number;
      message?: string;
      result?: string;
    };
    /** SubscriptInstance */
    SubscriptInstance: {
      /** Format: int32 */
      next?: number;
      type?: string;
      word?: string;
      wordCode?: string[];
      words?: string;
      wordsCode?: string[];
    };
    /** Table«TypeHistoryDto» */
    'Table«TypeHistoryDto»': {
      bodies?: components['schemas']['TypeHistoryDto'][];
      headers?: components['schemas']['Header'][];
    };
    /** Table«TypingHistoryVO» */
    'Table«TypingHistoryVO»': {
      bodies?: components['schemas']['TypingHistoryVO'][];
      headers?: components['schemas']['Header'][];
    };
    /** Table«UserWordSettingListPageVO» */
    'Table«UserWordSettingListPageVO»': {
      bodies?: components['schemas']['UserWordSettingListPageVO'][];
      headers?: components['schemas']['Header'][];
    };
    /** Table«WordLibListPageVO» */
    'Table«WordLibListPageVO»': {
      bodies?: components['schemas']['WordLibListPageVO'][];
      headers?: components['schemas']['Header'][];
    };
    /** TypeChar */
    TypeChar: {
      character?: string;
      /** Format: int64 */
      deleteTime?: number;
      mistake?: boolean;
      /** Format: int64 */
      typingTime?: number;
    };
    /** TypeHistoryDto */
    TypeHistoryDto: {
      /** Format: int64 */
      articleId?: number;
      /** Format: int32 */
      deleteNum?: number;
      /** Format: int32 */
      deleteText?: number;
      /** Format: int64 */
      id?: number;
      /** Format: double */
      keyAccuracy?: number;
      /** Format: double */
      keyLength?: number;
      /** Format: double */
      keyMethod?: number;
      /** Format: double */
      keySpeed?: number;
      /** Format: int32 */
      mistake?: number;
      mobile?: boolean;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      paragraph?: number;
      /** Format: int32 */
      repeatNum?: number;
      /** Format: double */
      speed?: number;
      /** Format: double */
      time?: number;
      /** Format: date */
      typeDate?: string;
      /** Format: int64 */
      userId?: number;
      /** Format: double */
      wordRate?: number;
    };
    /** TypedWordsDTO */
    TypedWordsDTO: {
      /** Format: int64 */
      historyId?: number;
      typeCodes?: string;
      typeWords?: components['schemas']['Words'][];
    };
    /** TypingHistory */
    TypingHistory: {
      /** Format: int64 */
      articleId?: number;
      /** Format: int32 */
      deleteNum?: number;
      /** Format: int32 */
      deleteText?: number;
      /** Format: int64 */
      id?: number;
      /** Format: double */
      keyAccuracy?: number;
      /** Format: double */
      keyLength?: number;
      /** Format: double */
      keyMethod?: number;
      /** Format: double */
      keySpeed?: number;
      /** Format: int32 */
      matchType?: number;
      /** Format: int32 */
      mistake?: number;
      mobile?: boolean;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      paragraph?: number;
      /** Format: int32 */
      repeatNum?: number;
      /** Format: double */
      speed?: number;
      /** Format: double */
      time?: number;
      /** Format: date-time */
      typeDate?: string;
      /** Format: int64 */
      userId?: number;
      /** Format: double */
      wordRate?: number;
    };
    /** TypingHistoryVO */
    TypingHistoryVO: {
      /** Format: int64 */
      articleId?: number;
      /** Format: int32 */
      deleteNum?: number;
      /** Format: int32 */
      deleteText?: number;
      /** Format: int64 */
      id?: number;
      /** Format: double */
      keyAccuracy?: number;
      /** Format: double */
      keyLength?: number;
      /** Format: double */
      keyMethod?: number;
      /** Format: double */
      keySpeed?: number;
      /** Format: int32 */
      mistake?: number;
      mobile?: boolean;
      mobileCN?: string;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      repeatNum?: number;
      /** Format: double */
      speed?: number;
      /** Format: double */
      time?: number;
      /** Format: date */
      typeDate?: string;
      /** Format: int64 */
      userId?: number;
      userName?: string;
      /** Format: double */
      wordRate?: number;
    };
    /** TypingMatchVO */
    TypingMatchVO: {
      article?: components['schemas']['Article'];
      /** Format: int64 */
      articleId?: number;
      author?: string;
      /** Format: date-time */
      holdDate?: string;
      /** Format: int64 */
      id?: number;
      /** Format: int32 */
      matchType?: number;
    };
    /** TypingTips */
    TypingTips: {
      /** @description 理论编码 */
      codes?: string;
      /** @description 词语提示 */
      subscriptInstances?: components['schemas']['SubscriptInstance'][];
    };
    /** TypingUser */
    TypingUser: {
      /** Format: int32 */
      dateNum?: number;
      /** Format: int64 */
      id?: number;
      /** Format: date */
      lastLoginDate?: string;
      /** Format: int32 */
      misNum?: number;
      /** Format: int32 */
      num?: number;
      /** Format: date */
      regDate?: string;
      /** Format: int32 */
      rightNum?: number;
    };
    /** TypingVersion */
    TypingVersion: {
      appVersion?: string;
      /** Format: int64 */
      id?: number;
      /** Format: date-time */
      updateDate?: string;
    };
    /** UserWordSettingListPageVO */
    UserWordSettingListPageVO: {
      /** Format: double */
      duplicateSymbolWeight?: number;
      /** Format: int64 */
      id?: number;
      keyBoardPartition?: string;
      /** Format: int64 */
      userId?: number;
      username?: string;
      /** Format: double */
      wordLengthWeight?: number;
      /** Format: int64 */
      wordLibId?: number;
      wordLibName?: string;
    };
    /** WordLibListPageVO */
    WordLibListPageVO: {
      /** Format: int32 */
      codeMaxLength?: number;
      /** Format: date-time */
      createTime?: string;
      duplicateSymbols?: string;
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      userId?: number;
      username?: string;
      /** Format: int32 */
      wordCount?: number;
      wordLibName?: string;
      /** Format: int32 */
      wordMaxLength?: number;
    };
    /** Words */
    Words: {
      codeTips?: string;
      codesChar?: components['schemas']['TypeChar'][];
      /** Format: int64 */
      typingTime?: number;
      wordTips?: string;
      wordsChar?: components['schemas']['TypeChar'][];
    };
  };
}

export interface operations {
  checkTokenUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  loginUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AccountDto'];
      };
    };
  };
  refreshTokenUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  registerUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AccountDto'];
      };
    };
  };
  getSettingUsingGET: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
      path: {
        /** type */
        type: 'hue' | 'layout' | 'shortcut';
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«JSONObject»'];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  updateSettingUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
      path: {
        /** type */
        type: 'hue' | 'layout' | 'shortcut';
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«JSONObject»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
    requestBody: {
      content: {
        'application/json': { [key: string]: { [key: string]: unknown } };
      };
    };
  };
  getArticleByIdUsingGET: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
      query: {
        /** articleId */
        articleId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«Article»'];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  uploadHistoryAndArticleUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['HistoryArticleDto'];
      };
    };
  };
  uploadTypingDetailUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TypedWordsDTO'];
      };
    };
  };
  codeLengthUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CodeParam'];
      };
    };
  };
  compareUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«List«ComparisonItem»»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CodeParam'];
      };
    };
  };
  uploadWordLibUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
      query: {
        /** key */
        key: string;
        /** value */
        value: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  synDataUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  typingTipsUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«Array«SubscriptInstance»»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CodeParam'];
      };
    };
  };
  getPCTljMatchAchByDateUsingGET: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
      query: {
        /** date */
        date?: string;
        /** matchType */
        matchType?: number;
        /** mobile */
        mobile?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«PageTable«TypingHistoryVO»»'];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getTodayMatchUsingGET: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
      query: {
        /** 是否为手机 */
        mobile: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«TypingMatchVO»'];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  uploadTljMatchAchUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TypingHistory'];
      };
    };
  };
  getNewVersionUsingGET: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«TypingVersion»'];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  changeNumUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«NumDto»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NumDto'];
      };
    };
  };
  getMyTypeHistoryUsingGET: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«PageTable«TypeHistoryDto»»'];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getMyInfoUsingGET: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«TypingUser»'];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  uploadWordLibUsingGET: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
      query: {
        author?: string;
        desc?: 'ASC' | 'DESC';
        maxCodeLength?: number;
        name?: string;
        orderBy?: 'CODE_MAX_LENGTH' | 'CREATE_TIME' | 'SHARE_TIME';
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«PageTable«WordLibListPageVO»»'];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  shareUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
      query: {
        /** wordLibId */
        wordLibId: number;
        /** share */
        share: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  wordLibPageUsingGET: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«PageTable«WordLibListPageVO»»'];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  uploadWordLibUsingPUT: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
      query: {
        /** 几码上屏方案（最长码长） */
        codeMaxLength: number;
        /** 选重符号 */
        duplicateSymbols: string;
        /** 码表文件 */
        file?: string;
        /** 引导符号 */
        leaderSymbols: string;
        /** 词库名称 */
        wordLibName: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteWordLibUsingDELETE: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
      query: {
        /** wordLibId */
        wordLibId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  loadWordLibUsingPOST: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getSettingUsingGET_1: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«PageTable«UserWordSettingListPageVO»»'];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  settingUsingPUT: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
      };
      query: {
        /** 设为默认词提 */
        defaultLib?: boolean;
        /** 选重权重 */
        duplicateSymbolWeight?: number;
        /** 词库id，更新时需填 */
        id?: number;
        /** 键盘分区 */
        keyBoardPartition?: string;
        /** 用户id */
        userId?: number;
        /** 码长权重 */
        wordLengthWeight?: number;
        /** 词库id */
        wordLibId?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteSettingUsingDELETE: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
      query: {
        /** settingId */
        settingId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«string»'];
        };
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  typingTipsUsingPOST_1: {
    parameters: {
      header: {
        /** 令牌 */
        Authorization?: string;
        /** 用户id */
        userId?: string;
      };
      query: {
        /** article */
        article: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['Result«TypingTips»'];
        };
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
}

export interface external {}
